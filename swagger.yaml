openapi: 3.0.0
info:
  title: "API Completa - User, Sensor, Notifications, Community"
  version: 1.0.0
  description: >-
    Gestão de utilizadores, sensores, notificações e comunidades, com
    autenticação JWT.
servers:
  - url: "http://localhost:3000/api"
    description: Servidor local
security:
  - bearerAuth: []
paths:
  /user/register:
    post:
      summary: Registar novo utilizador
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: Conta criada
        "400":
          description: Email já em uso
  /user/login:
    post:
      summary: Login
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login bem sucedido
        "401":
          description: Email ou senha incorretos
  "/user/verify-email/{token}":
    get:
      summary: Verificar email
      tags:
        - User
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verificado com sucesso
        "400":
          description: Token inválido ou expirado
  /user/refresh-token:
    post:
      summary: Renovar access token
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: Novo token JWT
  /user/me:
    get:
      summary: Obter dados do utilizador autenticado
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Dados do utilizador
    patch:
      summary: Atualizar dados do utilizador autenticado
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Dados atualizados
    delete:
      summary: Apagar conta própria
      tags:
        - User
      responses:
        "200":
          description: Conta apagada
  /user:
    get:
      summary: Obter todos os utilizadores (admin)
      tags:
        - User
      responses:
        "200":
          description: Lista de utilizadores
  "/user/{id}":
    get:
      summary: Obter utilizador por ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Utilizador encontrado
        "404":
          description: Utilizador não encontrado
    patch:
      summary: Atualizar utilizador por ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Utilizador atualizado
        "404":
          description: Utilizador não encontrado
    delete:
      summary: Apagar utilizador por ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Utilizador apagado
        "404":
          description: Utilizador não encontrado
  /user/me/configs:
    get:
      summary: Obter configurações do utilizador
      tags:
        - User
      responses:
        "200":
          description: Configurações
        "204":
          description: Sem configurações
    put:
      summary: Atualizar configurações
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - configs
              properties:
                configs:
                  type: array
                  items:
                    $ref: "#/components/schemas/UserConfig"
      responses:
        "200":
          description: Configurações atualizadas
  /sensors:
    post:
      summary: Criar sensor
      tags:
        - Sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SensorInput"
      responses:
        "201":
          description: Sensor criado
        "400":
          description: Campos obrigatórios em falta
    get:
      summary: Listar sensores
      tags:
        - Sensor
      responses:
        "200":
          description: Lista de sensores
  "/sensors/{id}":
    get:
      summary: Obter sensor por ID
      tags:
        - Sensor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Sensor encontrado
        "404":
          description: Sensor não encontrado
    patch:
      summary: Atualizar sensor por ID
      tags:
        - Sensor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SensorUpdate"
      responses:
        "200":
          description: Sensor atualizado
        "404":
          description: Sensor não encontrado
    delete:
      summary: Apagar sensor por ID
      tags:
        - Sensor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Sensor deletado
        "404":
          description: Sensor não encontrado
  /communities:
    post:
      summary: Criar comunidade
      tags:
        - Community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityInput"
      responses:
        "201":
          description: Comunidade criada
    get:
      summary: Listar comunidades
      tags:
        - Community
      responses:
        "200":
          description: Lista de comunidades
  "/communities/{id}":
    get:
      summary: Obter comunidade por ID
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comunidade encontrada
        "400":
          description: ID inválido
        "404":
          description: Comunidade não encontrada
    patch:
      summary: Atualizar comunidade por ID
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityInput"
      responses:
        "200":
          description: Comunidade atualizada
        "400":
          description: ID inválido
        "404":
          description: Comunidade não encontrada
    delete:
      summary: Apagar comunidade por ID
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comunidade apagada
        "400":
          description: ID inválido
        "404":
          description: Comunidade não encontrada
  "/communities/{id}/posts":
    get:
      summary: Listar posts aprovados de uma comunidade
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Posts encontrados
        "400":
          description: ID inválido
        "404":
          description: Comunidade não encontrada
    post:
      summary: Criar post em comunidade
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityPostInput"
      responses:
        "201":
          description: Post criado (aguardando aprovação)
        "400":
          description: Campos inválidos
        "404":
          description: Comunidade não encontrada
  "/communities/{id}/posts/{post_id}":
    delete:
      summary: Apagar post
      tags:
        - Community
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: post_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post deletado
        "400":
          description: ID inválido
        "404":
          description: Post ou comunidade não encontrado
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    UserConfig:
      type: object
      properties:
        location:
          type: string
        notification_type:
          type: string
          enum:
            - email
            - app
        alert_thresholds:
          type: object
          properties:
            temperature:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number
            humidity:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number
            gas:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number
    SensorInput:
      type: object
      required:
        - type
        - location
        - status
        - update_frequency
      properties:
        type:
          type: string
          example: temperatura
        location:
          type: string
          example: Sala
        status:
          type: string
          example: ativo
        update_frequency:
          type: integer
          description: frequência em segundos
        last_reading:
          type: string
          format: date-time
        readings:
          type: array
          items:
            type: object
    SensorUpdate:
      type: object
      properties:
        type:
          type: string
        location:
          type: string
        status:
          type: string
        update_frequency:
          type: integer
        last_reading:
          type: string
          format: date-time
        readings:
          type: array
          items:
            type: object
    CommunityInput:
      type: object
      required:
        - location
      properties:
        location:
          type: string
        members_count:
          type: integer
          default: 0
    CommunityPostInput:
      type: object
      required:
        - post_id
        - user_id
        - description
        - timestamp
        - status
      properties:
        post_id:
          type: string
        user_id:
          type: string
        sensor_id:
          type: string
        description:
          type: string
        media:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - waiting
            - approved
            - rejected
